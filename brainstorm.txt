

Formula.Crypto

Crypto.Hashing
Crypto.Symmetric
Crypto.Assymetric
Crpyto.Utils








HasherSharp - dedicated t6o hashing ONLY
EncoderSharp
EncryptorSharp

EndPointSecuritySharp


EasyCryptoDotNet
FastCrypto
Formula.Cryptography
  - Hasher
  - Encoder
  - Encryptor
  - Signer


Forumula.Hasher
Formula.Encoder
Formula.Encryptor



IHashingAlgorithm
	- Sha256HashinghAlgorithm
	- BtreehashingAlgorithm
	

ISemmetriceEncryptor


IStringFormatter
	.Format(byte[]
	-Format(string)

Hasher
  - Hash(s)
  - HashToBytes()
  - AppendCheckum(count = 4)
  - VerifyChecksum(hash) ; bool
  - MultiHash()


hasher = new Hasher(new Sha256Hasher())
atring hash = hasher.Hash();



string hasher = Hasher.New();


hasher = Hasher.New<Sha256Hasher>()l

string s  = hasher.ToByets(b)
		.ToString(string)
		.ToStream();



		FLUENT
		-----
			hasher.Hash(s).ToCustomeString();




 var hasher = new Hasher()
		  {
			HashAlgorithm = new Sha256Hasher(),
			Salt = “TEST-SALT”,
			OutputFormatter = new StringOutputFormatter()
		  };
s = hasher.Hash(“aldijalksdjaljadjf”);


CODE
=——
/Utils/ sealed internal helper classes


Liteweight crypto related classes for hashing encryption c# .Net 5+. All of classes are wrappers around the .NET core implementation that directly wraps the lowest level system based encryption libraries to ensure absolute security and reliability.






Bitcoin type keys
-----------------------------------
k = Private Key
K = Public Key
A = Public Address

K = SHA512(k)
A = SHA256(K)

or



// Generate Random Key ( one time )
privKey = SHA512( RandomSeed + Guid.New + MD5(DateTime) + etc.)

// Generate 12 Word Passphrase
passPhrase = CreatePassphrase( privKey )

// Generate pubKey
pubKey = SHA512( privKey )

// Generate Public Address
pubAddress = SHA256( pubKey )





IDEAS
------------------------
 new apps based using 
	- keys (pub / priv / pairs)
	- transactions
	- signatures
	- certificates
	- hashing
	- eliptic curves
	- merkle trees
	- RSA, ECDSA

lots of new interesting apps can be build using this tech.